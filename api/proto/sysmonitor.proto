syntax = "proto3";

import "google/protobuf/timestamp.proto";

package api;
option go_package = "api";

service Sysmonitor {    
    rpc SysInfo(Request) returns (stream Result) {}   
  }

// запрос к серверу от клиента
message Request {
    // промежуток времени выдачи информации (в секундах) 
    int32 timeout = 1;
    // период времени за который выдавать информацию (в секундах)
    int32 period = 2;
}

message SystemResponse {
    // время выдачи информации
    google.protobuf.Timestamp query_time = 1; 
    // средняя загрузка системы
    double system_load_value = 2;
}

// средняя загрузка CPU
message CPUResponse {
    google.protobuf.Timestamp query_time = 1;
    double user_mode = 2;
    double system_mode = 3;
    double idle = 4;
}

message Result {
    SystemResponse system_val = 1;
    CPUResponse cpu_val       = 2;
    DiskResponse disk_val     = 3;
    TalkersNetResponse talker_net_val = 4;
}

message DiskIO {
    string device    = 1;
	double tps       = 2;
	double kbReadS   = 3;
	double kbWriteS  = 4;
	int32 kbRead     = 5;
	int32 kbWrite    = 6;
}

message DiskFS {
	string fileSystem = 1; 
	string mountedOn  = 2;
	int32 used        = 3;
	int32 available   = 4;
    string useProc    = 5;  
	int32 used_inode        = 6;
	int32 available_inode   = 7;
	string useProc_inode    = 8;     
}

message DiskResponse {
    google.protobuf.Timestamp query_time = 1;
    repeated DiskIO io = 2;
    repeated DiskFS fs = 3;
}

message TalkersNetResponse {
    google.protobuf.Timestamp query_time = 1;
    repeated DeviceNet devnet = 2;
}

message DeviceNet {
	string net_interface   = 1; 
	int32 receive_bytes    = 2;
	int32 receive_packets  = 3;
    int32 receive_errs     = 4;  
	int32 transmit_bytes   = 5;
	int32 transmit_packets = 6;
	int32 transmit_errs    = 7;     
}