// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.11.4
// source: sysmonitor.proto

package api

import (
	context "context"
	reflect "reflect"
	sync "sync"

	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// запрос к серверу от клиента
type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// промежуток времени выдачи информации (в секундах)
	Timeout int32 `protobuf:"varint,1,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// период времени за который выдавать информацию (в секундах)
	Period int32 `protobuf:"varint,2,opt,name=period,proto3" json:"period,omitempty"`
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sysmonitor_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_sysmonitor_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_sysmonitor_proto_rawDescGZIP(), []int{0}
}

func (x *Request) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *Request) GetPeriod() int32 {
	if x != nil {
		return x.Period
	}
	return 0
}

type SystemResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// время выдачи информации
	QueryTime *timestamp.Timestamp `protobuf:"bytes,1,opt,name=query_time,json=queryTime,proto3" json:"query_time,omitempty"`
	// средняя загрузка системы
	SystemLoadValue float64 `protobuf:"fixed64,2,opt,name=system_load_value,json=systemLoadValue,proto3" json:"system_load_value,omitempty"`
}

func (x *SystemResponse) Reset() {
	*x = SystemResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sysmonitor_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemResponse) ProtoMessage() {}

func (x *SystemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sysmonitor_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemResponse.ProtoReflect.Descriptor instead.
func (*SystemResponse) Descriptor() ([]byte, []int) {
	return file_sysmonitor_proto_rawDescGZIP(), []int{1}
}

func (x *SystemResponse) GetQueryTime() *timestamp.Timestamp {
	if x != nil {
		return x.QueryTime
	}
	return nil
}

func (x *SystemResponse) GetSystemLoadValue() float64 {
	if x != nil {
		return x.SystemLoadValue
	}
	return 0
}

// средняя загрузка CPU
type CPUResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryTime  *timestamp.Timestamp `protobuf:"bytes,1,opt,name=query_time,json=queryTime,proto3" json:"query_time,omitempty"`
	UserMode   float64              `protobuf:"fixed64,2,opt,name=user_mode,json=userMode,proto3" json:"user_mode,omitempty"`
	SystemMode float64              `protobuf:"fixed64,3,opt,name=system_mode,json=systemMode,proto3" json:"system_mode,omitempty"`
	Idle       float64              `protobuf:"fixed64,4,opt,name=idle,proto3" json:"idle,omitempty"`
}

func (x *CPUResponse) Reset() {
	*x = CPUResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sysmonitor_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPUResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPUResponse) ProtoMessage() {}

func (x *CPUResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sysmonitor_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPUResponse.ProtoReflect.Descriptor instead.
func (*CPUResponse) Descriptor() ([]byte, []int) {
	return file_sysmonitor_proto_rawDescGZIP(), []int{2}
}

func (x *CPUResponse) GetQueryTime() *timestamp.Timestamp {
	if x != nil {
		return x.QueryTime
	}
	return nil
}

func (x *CPUResponse) GetUserMode() float64 {
	if x != nil {
		return x.UserMode
	}
	return 0
}

func (x *CPUResponse) GetSystemMode() float64 {
	if x != nil {
		return x.SystemMode
	}
	return 0
}

func (x *CPUResponse) GetIdle() float64 {
	if x != nil {
		return x.Idle
	}
	return 0
}

type Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SystemVal    *SystemResponse            `protobuf:"bytes,1,opt,name=system_val,json=systemVal,proto3" json:"system_val,omitempty"`
	CpuVal       *CPUResponse               `protobuf:"bytes,2,opt,name=cpu_val,json=cpuVal,proto3" json:"cpu_val,omitempty"`
	DiskVal      *DiskResponse              `protobuf:"bytes,3,opt,name=disk_val,json=diskVal,proto3" json:"disk_val,omitempty"`
	TalkerNetVal *TalkersNetResponse        `protobuf:"bytes,4,opt,name=talker_net_val,json=talkerNetVal,proto3" json:"talker_net_val,omitempty"`
	NetstatVal   *NetworkStatisticsResponse `protobuf:"bytes,5,opt,name=netstat_val,json=netstatVal,proto3" json:"netstat_val,omitempty"`
}

func (x *Result) Reset() {
	*x = Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sysmonitor_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Result) ProtoMessage() {}

func (x *Result) ProtoReflect() protoreflect.Message {
	mi := &file_sysmonitor_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Result.ProtoReflect.Descriptor instead.
func (*Result) Descriptor() ([]byte, []int) {
	return file_sysmonitor_proto_rawDescGZIP(), []int{3}
}

func (x *Result) GetSystemVal() *SystemResponse {
	if x != nil {
		return x.SystemVal
	}
	return nil
}

func (x *Result) GetCpuVal() *CPUResponse {
	if x != nil {
		return x.CpuVal
	}
	return nil
}

func (x *Result) GetDiskVal() *DiskResponse {
	if x != nil {
		return x.DiskVal
	}
	return nil
}

func (x *Result) GetTalkerNetVal() *TalkersNetResponse {
	if x != nil {
		return x.TalkerNetVal
	}
	return nil
}

func (x *Result) GetNetstatVal() *NetworkStatisticsResponse {
	if x != nil {
		return x.NetstatVal
	}
	return nil
}

type DiskIO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device   string  `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	Tps      float64 `protobuf:"fixed64,2,opt,name=tps,proto3" json:"tps,omitempty"`
	KbReadS  float64 `protobuf:"fixed64,3,opt,name=kbReadS,proto3" json:"kbReadS,omitempty"`
	KbWriteS float64 `protobuf:"fixed64,4,opt,name=kbWriteS,proto3" json:"kbWriteS,omitempty"`
	KbRead   int32   `protobuf:"varint,5,opt,name=kbRead,proto3" json:"kbRead,omitempty"`
	KbWrite  int32   `protobuf:"varint,6,opt,name=kbWrite,proto3" json:"kbWrite,omitempty"`
}

func (x *DiskIO) Reset() {
	*x = DiskIO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sysmonitor_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiskIO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiskIO) ProtoMessage() {}

func (x *DiskIO) ProtoReflect() protoreflect.Message {
	mi := &file_sysmonitor_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiskIO.ProtoReflect.Descriptor instead.
func (*DiskIO) Descriptor() ([]byte, []int) {
	return file_sysmonitor_proto_rawDescGZIP(), []int{4}
}

func (x *DiskIO) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *DiskIO) GetTps() float64 {
	if x != nil {
		return x.Tps
	}
	return 0
}

func (x *DiskIO) GetKbReadS() float64 {
	if x != nil {
		return x.KbReadS
	}
	return 0
}

func (x *DiskIO) GetKbWriteS() float64 {
	if x != nil {
		return x.KbWriteS
	}
	return 0
}

func (x *DiskIO) GetKbRead() int32 {
	if x != nil {
		return x.KbRead
	}
	return 0
}

func (x *DiskIO) GetKbWrite() int32 {
	if x != nil {
		return x.KbWrite
	}
	return 0
}

type DiskFS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileSystem     string `protobuf:"bytes,1,opt,name=fileSystem,proto3" json:"fileSystem,omitempty"`
	MountedOn      string `protobuf:"bytes,2,opt,name=mountedOn,proto3" json:"mountedOn,omitempty"`
	Used           int32  `protobuf:"varint,3,opt,name=used,proto3" json:"used,omitempty"`
	Available      int32  `protobuf:"varint,4,opt,name=available,proto3" json:"available,omitempty"`
	UseProc        string `protobuf:"bytes,5,opt,name=useProc,proto3" json:"useProc,omitempty"`
	UsedInode      int32  `protobuf:"varint,6,opt,name=used_inode,json=usedInode,proto3" json:"used_inode,omitempty"`
	AvailableInode int32  `protobuf:"varint,7,opt,name=available_inode,json=availableInode,proto3" json:"available_inode,omitempty"`
	UseProcInode   string `protobuf:"bytes,8,opt,name=useProc_inode,json=useProcInode,proto3" json:"useProc_inode,omitempty"`
}

func (x *DiskFS) Reset() {
	*x = DiskFS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sysmonitor_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiskFS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiskFS) ProtoMessage() {}

func (x *DiskFS) ProtoReflect() protoreflect.Message {
	mi := &file_sysmonitor_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiskFS.ProtoReflect.Descriptor instead.
func (*DiskFS) Descriptor() ([]byte, []int) {
	return file_sysmonitor_proto_rawDescGZIP(), []int{5}
}

func (x *DiskFS) GetFileSystem() string {
	if x != nil {
		return x.FileSystem
	}
	return ""
}

func (x *DiskFS) GetMountedOn() string {
	if x != nil {
		return x.MountedOn
	}
	return ""
}

func (x *DiskFS) GetUsed() int32 {
	if x != nil {
		return x.Used
	}
	return 0
}

func (x *DiskFS) GetAvailable() int32 {
	if x != nil {
		return x.Available
	}
	return 0
}

func (x *DiskFS) GetUseProc() string {
	if x != nil {
		return x.UseProc
	}
	return ""
}

func (x *DiskFS) GetUsedInode() int32 {
	if x != nil {
		return x.UsedInode
	}
	return 0
}

func (x *DiskFS) GetAvailableInode() int32 {
	if x != nil {
		return x.AvailableInode
	}
	return 0
}

func (x *DiskFS) GetUseProcInode() string {
	if x != nil {
		return x.UseProcInode
	}
	return ""
}

type DiskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryTime *timestamp.Timestamp `protobuf:"bytes,1,opt,name=query_time,json=queryTime,proto3" json:"query_time,omitempty"`
	Io        []*DiskIO            `protobuf:"bytes,2,rep,name=io,proto3" json:"io,omitempty"`
	Fs        []*DiskFS            `protobuf:"bytes,3,rep,name=fs,proto3" json:"fs,omitempty"`
}

func (x *DiskResponse) Reset() {
	*x = DiskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sysmonitor_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiskResponse) ProtoMessage() {}

func (x *DiskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sysmonitor_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiskResponse.ProtoReflect.Descriptor instead.
func (*DiskResponse) Descriptor() ([]byte, []int) {
	return file_sysmonitor_proto_rawDescGZIP(), []int{6}
}

func (x *DiskResponse) GetQueryTime() *timestamp.Timestamp {
	if x != nil {
		return x.QueryTime
	}
	return nil
}

func (x *DiskResponse) GetIo() []*DiskIO {
	if x != nil {
		return x.Io
	}
	return nil
}

func (x *DiskResponse) GetFs() []*DiskFS {
	if x != nil {
		return x.Fs
	}
	return nil
}

type TalkersNetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryTime *timestamp.Timestamp `protobuf:"bytes,1,opt,name=query_time,json=queryTime,proto3" json:"query_time,omitempty"`
	Devnet    []*DeviceNet         `protobuf:"bytes,2,rep,name=devnet,proto3" json:"devnet,omitempty"`
}

func (x *TalkersNetResponse) Reset() {
	*x = TalkersNetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sysmonitor_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TalkersNetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TalkersNetResponse) ProtoMessage() {}

func (x *TalkersNetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sysmonitor_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TalkersNetResponse.ProtoReflect.Descriptor instead.
func (*TalkersNetResponse) Descriptor() ([]byte, []int) {
	return file_sysmonitor_proto_rawDescGZIP(), []int{7}
}

func (x *TalkersNetResponse) GetQueryTime() *timestamp.Timestamp {
	if x != nil {
		return x.QueryTime
	}
	return nil
}

func (x *TalkersNetResponse) GetDevnet() []*DeviceNet {
	if x != nil {
		return x.Devnet
	}
	return nil
}

type DeviceNet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetInterface    string `protobuf:"bytes,1,opt,name=net_interface,json=netInterface,proto3" json:"net_interface,omitempty"`
	ReceiveBytes    int32  `protobuf:"varint,2,opt,name=receive_bytes,json=receiveBytes,proto3" json:"receive_bytes,omitempty"`
	ReceivePackets  int32  `protobuf:"varint,3,opt,name=receive_packets,json=receivePackets,proto3" json:"receive_packets,omitempty"`
	ReceiveErrs     int32  `protobuf:"varint,4,opt,name=receive_errs,json=receiveErrs,proto3" json:"receive_errs,omitempty"`
	TransmitBytes   int32  `protobuf:"varint,5,opt,name=transmit_bytes,json=transmitBytes,proto3" json:"transmit_bytes,omitempty"`
	TransmitPackets int32  `protobuf:"varint,6,opt,name=transmit_packets,json=transmitPackets,proto3" json:"transmit_packets,omitempty"`
	TransmitErrs    int32  `protobuf:"varint,7,opt,name=transmit_errs,json=transmitErrs,proto3" json:"transmit_errs,omitempty"`
}

func (x *DeviceNet) Reset() {
	*x = DeviceNet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sysmonitor_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceNet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceNet) ProtoMessage() {}

func (x *DeviceNet) ProtoReflect() protoreflect.Message {
	mi := &file_sysmonitor_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceNet.ProtoReflect.Descriptor instead.
func (*DeviceNet) Descriptor() ([]byte, []int) {
	return file_sysmonitor_proto_rawDescGZIP(), []int{8}
}

func (x *DeviceNet) GetNetInterface() string {
	if x != nil {
		return x.NetInterface
	}
	return ""
}

func (x *DeviceNet) GetReceiveBytes() int32 {
	if x != nil {
		return x.ReceiveBytes
	}
	return 0
}

func (x *DeviceNet) GetReceivePackets() int32 {
	if x != nil {
		return x.ReceivePackets
	}
	return 0
}

func (x *DeviceNet) GetReceiveErrs() int32 {
	if x != nil {
		return x.ReceiveErrs
	}
	return 0
}

func (x *DeviceNet) GetTransmitBytes() int32 {
	if x != nil {
		return x.TransmitBytes
	}
	return 0
}

func (x *DeviceNet) GetTransmitPackets() int32 {
	if x != nil {
		return x.TransmitPackets
	}
	return 0
}

func (x *DeviceNet) GetTransmitErrs() int32 {
	if x != nil {
		return x.TransmitErrs
	}
	return 0
}

type NetworkStatisticsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryTime *timestamp.Timestamp `protobuf:"bytes,1,opt,name=query_time,json=queryTime,proto3" json:"query_time,omitempty"`
	Netstat   []*NetStatDetail     `protobuf:"bytes,2,rep,name=netstat,proto3" json:"netstat,omitempty"`
}

func (x *NetworkStatisticsResponse) Reset() {
	*x = NetworkStatisticsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sysmonitor_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkStatisticsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkStatisticsResponse) ProtoMessage() {}

func (x *NetworkStatisticsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sysmonitor_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkStatisticsResponse.ProtoReflect.Descriptor instead.
func (*NetworkStatisticsResponse) Descriptor() ([]byte, []int) {
	return file_sysmonitor_proto_rawDescGZIP(), []int{9}
}

func (x *NetworkStatisticsResponse) GetQueryTime() *timestamp.Timestamp {
	if x != nil {
		return x.QueryTime
	}
	return nil
}

func (x *NetworkStatisticsResponse) GetNetstat() []*NetStatDetail {
	if x != nil {
		return x.Netstat
	}
	return nil
}

type NetStatDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State        string `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	Recv         int32  `protobuf:"varint,2,opt,name=recv,proto3" json:"recv,omitempty"`
	Send         int32  `protobuf:"varint,3,opt,name=send,proto3" json:"send,omitempty"`
	LocalAddress string `protobuf:"bytes,4,opt,name=local_address,json=localAddress,proto3" json:"local_address,omitempty"`
	PeerAddress  string `protobuf:"bytes,5,opt,name=peer_address,json=peerAddress,proto3" json:"peer_address,omitempty"`
}

func (x *NetStatDetail) Reset() {
	*x = NetStatDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sysmonitor_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetStatDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetStatDetail) ProtoMessage() {}

func (x *NetStatDetail) ProtoReflect() protoreflect.Message {
	mi := &file_sysmonitor_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetStatDetail.ProtoReflect.Descriptor instead.
func (*NetStatDetail) Descriptor() ([]byte, []int) {
	return file_sysmonitor_proto_rawDescGZIP(), []int{10}
}

func (x *NetStatDetail) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *NetStatDetail) GetRecv() int32 {
	if x != nil {
		return x.Recv
	}
	return 0
}

func (x *NetStatDetail) GetSend() int32 {
	if x != nil {
		return x.Send
	}
	return 0
}

func (x *NetStatDetail) GetLocalAddress() string {
	if x != nil {
		return x.LocalAddress
	}
	return ""
}

func (x *NetStatDetail) GetPeerAddress() string {
	if x != nil {
		return x.PeerAddress
	}
	return ""
}

var File_sysmonitor_proto protoreflect.FileDescriptor

var file_sysmonitor_proto_rawDesc = []byte{
	0x0a, 0x10, 0x73, 0x79, 0x73, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x03, 0x61, 0x70, 0x69, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3b, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x22, 0x77, 0x0a, 0x0e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6c, 0x6f, 0x61,
	0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x4c, 0x6f, 0x61, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x9a,
	0x01, 0x0a, 0x0b, 0x43, 0x50, 0x55, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39,
	0x0a, 0x0a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x64, 0x6c, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x69, 0x64, 0x6c, 0x65, 0x22, 0x95, 0x02, 0x0a, 0x06,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x32, 0x0a, 0x0a, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x5f, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x09, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x56, 0x61, 0x6c, 0x12, 0x29, 0x0a, 0x07, 0x63, 0x70,
	0x75, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x43, 0x50, 0x55, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x06, 0x63,
	0x70, 0x75, 0x56, 0x61, 0x6c, 0x12, 0x2c, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x76, 0x61,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x69,
	0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x64, 0x69, 0x73, 0x6b,
	0x56, 0x61, 0x6c, 0x12, 0x3d, 0x0a, 0x0e, 0x74, 0x61, 0x6c, 0x6b, 0x65, 0x72, 0x5f, 0x6e, 0x65,
	0x74, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x65, 0x72, 0x73, 0x4e, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x74, 0x61, 0x6c, 0x6b, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x56,
	0x61, 0x6c, 0x12, 0x3f, 0x0a, 0x0b, 0x6e, 0x65, 0x74, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x76, 0x61,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x6e, 0x65, 0x74, 0x73, 0x74, 0x61, 0x74,
	0x56, 0x61, 0x6c, 0x22, 0x9a, 0x01, 0x0a, 0x06, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x4f, 0x12, 0x16,
	0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x70, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x03, 0x74, 0x70, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x62, 0x52, 0x65,
	0x61, 0x64, 0x53, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x6b, 0x62, 0x52, 0x65, 0x61,
	0x64, 0x53, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x62, 0x57, 0x72, 0x69, 0x74, 0x65, 0x53, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6b, 0x62, 0x57, 0x72, 0x69, 0x74, 0x65, 0x53, 0x12, 0x16,
	0x0a, 0x06, 0x6b, 0x62, 0x52, 0x65, 0x61, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x6b, 0x62, 0x52, 0x65, 0x61, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x62, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6b, 0x62, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x22, 0xff, 0x01, 0x0a, 0x06, 0x44, 0x69, 0x73, 0x6b, 0x46, 0x53, 0x12, 0x1e, 0x0a, 0x0a, 0x66,
	0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x64, 0x4f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x64, 0x4f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x75, 0x73, 0x65, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73,
	0x65, 0x50, 0x72, 0x6f, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x69, 0x6e,
	0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x75, 0x73, 0x65, 0x64, 0x49,
	0x6e, 0x6f, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x75, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x5f, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x49, 0x6e, 0x6f,
	0x64, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b,
	0x0a, 0x02, 0x69, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x4f, 0x52, 0x02, 0x69, 0x6f, 0x12, 0x1b, 0x0a, 0x02, 0x66,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x69,
	0x73, 0x6b, 0x46, 0x53, 0x52, 0x02, 0x66, 0x73, 0x22, 0x77, 0x0a, 0x12, 0x54, 0x61, 0x6c, 0x6b,
	0x65, 0x72, 0x73, 0x4e, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39,
	0x0a, 0x0a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x64, 0x65, 0x76,
	0x6e, 0x65, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x65, 0x74, 0x52, 0x06, 0x64, 0x65, 0x76, 0x6e, 0x65,
	0x74, 0x22, 0x98, 0x02, 0x0a, 0x09, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x65, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x65, 0x72,
	0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x45, 0x72, 0x72, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69,
	0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x6d, 0x69, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x45, 0x72, 0x72, 0x73, 0x22, 0x84, 0x01, 0x0a,
	0x19, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x73, 0x74, 0x61, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4e, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x73,
	0x74, 0x61, 0x74, 0x22, 0x95, 0x01, 0x0a, 0x0d, 0x4e, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72,
	0x65, 0x63, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x65, 0x63, 0x76, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73,
	0x65, 0x6e, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x65, 0x65, 0x72,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x65, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x36, 0x0a, 0x0a, 0x53,
	0x79, 0x73, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x07, 0x53, 0x79, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x00, 0x30, 0x01, 0x42, 0x07, 0x5a, 0x05, 0x2e, 0x3b, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sysmonitor_proto_rawDescOnce sync.Once
	file_sysmonitor_proto_rawDescData = file_sysmonitor_proto_rawDesc
)

func file_sysmonitor_proto_rawDescGZIP() []byte {
	file_sysmonitor_proto_rawDescOnce.Do(func() {
		file_sysmonitor_proto_rawDescData = protoimpl.X.CompressGZIP(file_sysmonitor_proto_rawDescData)
	})
	return file_sysmonitor_proto_rawDescData
}

var file_sysmonitor_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_sysmonitor_proto_goTypes = []interface{}{
	(*Request)(nil),                   // 0: api.Request
	(*SystemResponse)(nil),            // 1: api.SystemResponse
	(*CPUResponse)(nil),               // 2: api.CPUResponse
	(*Result)(nil),                    // 3: api.Result
	(*DiskIO)(nil),                    // 4: api.DiskIO
	(*DiskFS)(nil),                    // 5: api.DiskFS
	(*DiskResponse)(nil),              // 6: api.DiskResponse
	(*TalkersNetResponse)(nil),        // 7: api.TalkersNetResponse
	(*DeviceNet)(nil),                 // 8: api.DeviceNet
	(*NetworkStatisticsResponse)(nil), // 9: api.NetworkStatisticsResponse
	(*NetStatDetail)(nil),             // 10: api.NetStatDetail
	(*timestamp.Timestamp)(nil),       // 11: google.protobuf.Timestamp
}
var file_sysmonitor_proto_depIdxs = []int32{
	11, // 0: api.SystemResponse.query_time:type_name -> google.protobuf.Timestamp
	11, // 1: api.CPUResponse.query_time:type_name -> google.protobuf.Timestamp
	1,  // 2: api.Result.system_val:type_name -> api.SystemResponse
	2,  // 3: api.Result.cpu_val:type_name -> api.CPUResponse
	6,  // 4: api.Result.disk_val:type_name -> api.DiskResponse
	7,  // 5: api.Result.talker_net_val:type_name -> api.TalkersNetResponse
	9,  // 6: api.Result.netstat_val:type_name -> api.NetworkStatisticsResponse
	11, // 7: api.DiskResponse.query_time:type_name -> google.protobuf.Timestamp
	4,  // 8: api.DiskResponse.io:type_name -> api.DiskIO
	5,  // 9: api.DiskResponse.fs:type_name -> api.DiskFS
	11, // 10: api.TalkersNetResponse.query_time:type_name -> google.protobuf.Timestamp
	8,  // 11: api.TalkersNetResponse.devnet:type_name -> api.DeviceNet
	11, // 12: api.NetworkStatisticsResponse.query_time:type_name -> google.protobuf.Timestamp
	10, // 13: api.NetworkStatisticsResponse.netstat:type_name -> api.NetStatDetail
	0,  // 14: api.Sysmonitor.SysInfo:input_type -> api.Request
	3,  // 15: api.Sysmonitor.SysInfo:output_type -> api.Result
	15, // [15:16] is the sub-list for method output_type
	14, // [14:15] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_sysmonitor_proto_init() }
func file_sysmonitor_proto_init() {
	if File_sysmonitor_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sysmonitor_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sysmonitor_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sysmonitor_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPUResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sysmonitor_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sysmonitor_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiskIO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sysmonitor_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiskFS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sysmonitor_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sysmonitor_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TalkersNetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sysmonitor_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceNet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sysmonitor_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkStatisticsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sysmonitor_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetStatDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sysmonitor_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_sysmonitor_proto_goTypes,
		DependencyIndexes: file_sysmonitor_proto_depIdxs,
		MessageInfos:      file_sysmonitor_proto_msgTypes,
	}.Build()
	File_sysmonitor_proto = out.File
	file_sysmonitor_proto_rawDesc = nil
	file_sysmonitor_proto_goTypes = nil
	file_sysmonitor_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SysmonitorClient is the client API for Sysmonitor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SysmonitorClient interface {
	SysInfo(ctx context.Context, in *Request, opts ...grpc.CallOption) (Sysmonitor_SysInfoClient, error)
}

type sysmonitorClient struct {
	cc grpc.ClientConnInterface
}

func NewSysmonitorClient(cc grpc.ClientConnInterface) SysmonitorClient {
	return &sysmonitorClient{cc}
}

func (c *sysmonitorClient) SysInfo(ctx context.Context, in *Request, opts ...grpc.CallOption) (Sysmonitor_SysInfoClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Sysmonitor_serviceDesc.Streams[0], "/api.Sysmonitor/SysInfo", opts...)
	if err != nil {
		return nil, err
	}
	x := &sysmonitorSysInfoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Sysmonitor_SysInfoClient interface {
	Recv() (*Result, error)
	grpc.ClientStream
}

type sysmonitorSysInfoClient struct {
	grpc.ClientStream
}

func (x *sysmonitorSysInfoClient) Recv() (*Result, error) {
	m := new(Result)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SysmonitorServer is the server API for Sysmonitor service.
type SysmonitorServer interface {
	SysInfo(*Request, Sysmonitor_SysInfoServer) error
}

// UnimplementedSysmonitorServer can be embedded to have forward compatible implementations.
type UnimplementedSysmonitorServer struct {
}

func (*UnimplementedSysmonitorServer) SysInfo(*Request, Sysmonitor_SysInfoServer) error {
	return status.Errorf(codes.Unimplemented, "method SysInfo not implemented")
}

func RegisterSysmonitorServer(s *grpc.Server, srv SysmonitorServer) {
	s.RegisterService(&_Sysmonitor_serviceDesc, srv)
}

func _Sysmonitor_SysInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SysmonitorServer).SysInfo(m, &sysmonitorSysInfoServer{stream})
}

type Sysmonitor_SysInfoServer interface {
	Send(*Result) error
	grpc.ServerStream
}

type sysmonitorSysInfoServer struct {
	grpc.ServerStream
}

func (x *sysmonitorSysInfoServer) Send(m *Result) error {
	return x.ServerStream.SendMsg(m)
}

var _Sysmonitor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Sysmonitor",
	HandlerType: (*SysmonitorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SysInfo",
			Handler:       _Sysmonitor_SysInfo_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sysmonitor.proto",
}
